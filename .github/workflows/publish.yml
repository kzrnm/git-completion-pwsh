name: Test & Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-new: ${{ steps.is-new-version.outputs.is-new }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Module Version
        id: get-version
        shell: pwsh
        run: |
          Import-Module ./src/git-completion.psd1
          $version = (Get-Module git-completion).Version.ToString()
          Write-Output $version
          Write-Output "name=version::$version" >> $GITHUB_OUTPUT

      - name: Check tag
        uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: v${{ steps.get-version.outputs.version }}

      - name: is new version?
        id: is-new-version
        run: |
          IS_NEW=false
          if [ "${{ steps.check-tag.outputs.exists }}" = "false" ]; then
            echo "new version tag project: ${{ steps.get-version.outputs.version }}"
            IS_NEW=true
          fi
          echo "name=is-new::$IS_NEW" >> $GITHUB_OUTPUT
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Pester
        shell: pwsh
        run: Invoke-Pester -CI

  # new-version-only:
  #   runs-on: ubuntu-latest
  #   needs: [get-version, test]
  #   if: ${{ needs.get-version.outputs.is-new == 'true' }}
  #   steps:
  #     - run: echo "new-version"

  # publish:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: actions
  #     url: https://github.com
  #   needs: [get-version, new-version-only]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Push tag
  #       id: tag-version
  #       run: echo "new-tag=v${{ needs.get-version.outputs.version }}" | tee -a "$GITHUB_OUTPUT"

  #     - name: Create release
  #       uses: ncipollo/release-action@v1
  #       id: create-release
  #       with:
  #         tag: ${{ steps.tag-version.outputs.new_tag }}
  #         name: Version ${{ needs.get-version.outputs.version }}
  #         body: https://github.com/${{ github.repository }}/blob/${{ steps.tag-version.outputs.new_tag }}/CHANGELOG.md

  #     - name: Install-Module PowerShellGet
  #       shell: pwsh
  #       run: |
  #         Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
  #         Install-Module PowerShellGet -MinimumVersion "3.0.12-beta" -AllowPrerelease -Repository PSGallery -AllowClobber -Force

  #     - name: Publish
  #       shell: pwsh
  #       run: |
  #         $NUGET_KEY = "${{ secrets.PWSH_NUGET_KEY  }}"
  #         tools/dist.ps1 -TagName "v${{ needs.get-version.outputs.version }}"
  #         Import-Module PowerShellGet
  #         Publish-PSResource -Path ./git-completion -APIKey "$NUGET_KEY" -Repository PSGallery
